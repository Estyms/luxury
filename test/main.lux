syscall_print : asm (text: * char, size : u64) {
    mov %rsi, %rdx
    mov $1, %rax
    mov $1, %rbx
    mov %rdi, %rsi
    mov $0, %rdi
    syscall
    ret
}

print : func (text: * char) {
    size := 0;
    pointer := text;

    while @pointer {
        pointer = pointer + 1;
        size = size + 1;
    }

    syscall_print(text, size);
}


main : func (argument_count: u64, arguments: **char) {
    print("this is cool\n");

    counter = 0;

    for i in 0 .. 10000 {
        printf("%d\n", counter);
        counter = counter + 1;
    }

    token : struct {
        a : u32;
        b : u32;

        test : union {
            data: IPv4;
            struct {
                new_data : u64;
            }
        }
    }

    token.b = 45;
    token.test.data = 45;

    printf("Token is %d\n", token.test.data);
    printf("Token is %d\n", token.test.new_data);
    
    counter : u32 = 34;
}

IPv4 :: u32;
